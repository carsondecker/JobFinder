// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: applications.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createApplication = `-- name: CreateApplication :one
INSERT INTO applications(id, created_at, updated_at, cover_note, job_id, user_id)
VALUES (
    gen_random_uuid(),
    NOW(),
    NOW(),
    $1,
    $2,
    $3
)
RETURNING id, created_at, updated_at, cover_note, job_id, user_id
`

type CreateApplicationParams struct {
	CoverNote string
	JobID     uuid.UUID
	UserID    uuid.UUID
}

func (q *Queries) CreateApplication(ctx context.Context, arg CreateApplicationParams) (Application, error) {
	row := q.db.QueryRowContext(ctx, createApplication, arg.CoverNote, arg.JobID, arg.UserID)
	var i Application
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CoverNote,
		&i.JobID,
		&i.UserID,
	)
	return i, err
}

const getApplicationsByJobID = `-- name: GetApplicationsByJobID :many
SELECT id, created_at, updated_at, cover_note, job_id, user_id
FROM applications
WHERE job_id = $1
`

func (q *Queries) GetApplicationsByJobID(ctx context.Context, jobID uuid.UUID) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, getApplicationsByJobID, jobID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CoverNote,
			&i.JobID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getApplicationsByUserID = `-- name: GetApplicationsByUserID :many
SELECT id, created_at, updated_at, cover_note, job_id, user_id
FROM applications
WHERE user_id = $1
`

func (q *Queries) GetApplicationsByUserID(ctx context.Context, userID uuid.UUID) ([]Application, error) {
	rows, err := q.db.QueryContext(ctx, getApplicationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CoverNote,
			&i.JobID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
